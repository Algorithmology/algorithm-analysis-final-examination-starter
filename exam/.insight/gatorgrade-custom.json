{
    "amount_correct": 43,
    "percentage_score": 43,
    "report_time": "2024-05-02 12:30:19",
    "checks": [
        {
            "description": "Ensure that the README.md file exists inside of the root of the GitHub repository",
            "check": "ConfirmFileExists",
            "status": true,
            "path": "../README.md"
        },
        {
            "description": "Delete the phrase 'Add Your Name Here' and add your own name as an Honor Code pledge in README.md",
            "check": "MatchFileFragment",
            "options": {
                "fragment": "Add Your Name Here",
                "count": 0,
                "exact": true
            },
            "status": true,
            "path": "../README.md"
        },
        {
            "description": "Retype the every word in the Honor Code pledge in README.md",
            "check": "MatchFileFragment",
            "options": {
                "fragment": "I adhered to the Allegheny College Honor Code while completing this examination.",
                "count": 3,
                "exact": true
            },
            "status": true,
            "path": "../README.md"
        },
        {
            "description": "Indicate that you have completed all of the tasks in the README.md",
            "check": "MatchFileFragment",
            "options": {
                "fragment": "- [X]",
                "count": 10,
                "exact": true
            },
            "status": false,
            "path": "../README.md",
            "diagnostic": "Found 0 fragment(s) in the README.md or the output while expecting exactly 10"
        },
        {
            "description": "Ensure that question_one.py file exists in the questions/ directory",
            "check": "ConfirmFileExists",
            "status": true,
            "path": "questions/question_one.py"
        },
        {
            "description": "Complete all TODOs, remove the TODO markers, and rewrite comments for question_one.py",
            "check": "MatchFileFragment",
            "options": {
                "fragment": "TODO",
                "count": 0,
                "exact": true
            },
            "status": false,
            "path": "questions/question_one.py",
            "diagnostic": "Found 10 fragment(s) in the question_one.py or the output while expecting exactly 0"
        },
        {
            "description": "Create a sufficient number of docstring (i.e., multiple-line) comments in question_one.py",
            "check": "CountMultipleLineComments",
            "options": {
                "language": "Python",
                "count": 4,
                "exact": true
            },
            "status": true,
            "path": "questions/question_one.py"
        },
        {
            "description": "Ensure that test_question_one.py file exists in the tests/ directory",
            "check": "ConfirmFileExists",
            "status": true,
            "path": "tests/test_question_one.py"
        },
        {
            "description": "Ensure that question_two.py file exists in the questions/ directory",
            "check": "ConfirmFileExists",
            "status": true,
            "path": "questions/question_two.py"
        },
        {
            "description": "Complete all TODOs, remove the TODO markers, and rewrite comments for question_two.py",
            "check": "MatchFileFragment",
            "options": {
                "fragment": "TODO",
                "count": 0,
                "exact": true
            },
            "status": false,
            "path": "questions/question_two.py",
            "diagnostic": "Found 7 fragment(s) in the question_two.py or the output while expecting exactly 0"
        },
        {
            "description": "Create a sufficient number of docstring (i.e., multiple-line) comments in question_two.py",
            "check": "CountMultipleLineComments",
            "options": {
                "language": "Python",
                "count": 4,
                "exact": true
            },
            "status": false,
            "path": "questions/question_two.py",
            "diagnostic": "Found 2 comment(s) in the question_two.py or the output"
        },
        {
            "description": "Ensure that test_question_two.py file exists in the tests/ directory",
            "check": "ConfirmFileExists",
            "status": true,
            "path": "tests/test_question_two.py"
        },
        {
            "description": "Ensure that question_three.py file exists in the questions/ directory",
            "check": "ConfirmFileExists",
            "status": true,
            "path": "questions/question_three.py"
        },
        {
            "description": "Complete all TODOs, remove the TODO markers, and rewrite comments for question_three.py",
            "check": "MatchFileFragment",
            "options": {
                "fragment": "TODO",
                "count": 0,
                "exact": true
            },
            "status": false,
            "path": "questions/question_three.py",
            "diagnostic": "Found 7 fragment(s) in the question_three.py or the output while expecting exactly 0"
        },
        {
            "description": "Create a sufficient number of docstring (i.e., multiple-line) comments in question_three.py",
            "check": "CountMultipleLineComments",
            "options": {
                "language": "Python",
                "count": 4,
                "exact": true
            },
            "status": true,
            "path": "questions/question_three.py"
        },
        {
            "description": "Ensure that test_question_three.py file exists in the tests/ directory",
            "check": "ConfirmFileExists",
            "status": true,
            "path": "tests/test_question_three.py"
        },
        {
            "description": "Ensure that question_four.py file exists in the questions/ directory",
            "check": "ConfirmFileExists",
            "status": true,
            "path": "questions/question_four.py"
        },
        {
            "description": "Complete all TODOs, remove the TODO markers, and rewrite comments for question_four.py",
            "check": "MatchFileFragment",
            "options": {
                "fragment": "TODO",
                "count": 0,
                "exact": true
            },
            "status": false,
            "path": "questions/question_four.py",
            "diagnostic": "Found 8 fragment(s) in the question_four.py or the output while expecting exactly 0"
        },
        {
            "description": "Create a sufficient number of docstring (i.e., multiple-line) comments in question_four.py",
            "check": "CountMultipleLineComments",
            "options": {
                "language": "Python",
                "count": 7,
                "exact": true
            },
            "status": false,
            "path": "questions/question_four.py",
            "diagnostic": "Found 4 comment(s) in the question_four.py or the output"
        },
        {
            "description": "Ensure that test_question_four.py file exists in the tests/ directory",
            "check": "ConfirmFileExists",
            "status": true,
            "path": "tests/test_question_four.py"
        },
        {
            "description": "Ensure that question_five.py file exists in the questions/ directory",
            "check": "ConfirmFileExists",
            "status": true,
            "path": "questions/question_five.py"
        },
        {
            "description": "Complete all TODOs, remove the TODO markers, and rewrite comments for question_ffive.py",
            "check": "MatchFileFragment",
            "options": {
                "fragment": "TODO",
                "count": 0,
                "exact": true
            },
            "status": true,
            "path": "questions/question_five.py"
        },
        {
            "description": "Create a sufficient number of docstring (i.e., multiple-line) comments in question_five.py",
            "check": "CountMultipleLineComments",
            "options": {
                "language": "Python",
                "count": 10,
                "exact": false
            },
            "status": false,
            "path": "questions/question_five.py",
            "diagnostic": "Found 7 comment(s) in the question_five.py or the output"
        },
        {
            "description": "Ensure that test_question_four.py file exists in the tests/ directory",
            "check": "ConfirmFileExists",
            "status": true,
            "path": "tests/test_question_five.py"
        },
        {
            "description": "Ensure that question_six.py file exists in the questions/ directory",
            "check": "ConfirmFileExists",
            "status": true,
            "path": "questions/question_six.py"
        },
        {
            "description": "Complete all TODOs, remove the TODO markers, and rewrite comments for question_six.py",
            "check": "MatchFileFragment",
            "options": {
                "fragment": "TODO",
                "count": 0,
                "exact": true
            },
            "status": false,
            "path": "questions/question_six.py",
            "diagnostic": "Found 8 fragment(s) in the question_six.py or the output while expecting exactly 0"
        },
        {
            "description": "Create a sufficient number of docstring (i.e., multiple-line) comments in question_six.py",
            "check": "CountMultipleLineComments",
            "options": {
                "language": "Python",
                "count": 9,
                "exact": false
            },
            "status": false,
            "path": "questions/question_six.py",
            "diagnostic": "Found 7 comment(s) in the question_six.py or the output"
        },
        {
            "description": "Ensure that test_question_six.py file exists in the tests/ directory",
            "check": "ConfirmFileExists",
            "status": true,
            "path": "tests/test_question_six.py"
        },
        {
            "description": "Ensure that question_seven.py file exists in the questions/ directory",
            "check": "ConfirmFileExists",
            "status": true,
            "path": "questions/question_seven.py"
        },
        {
            "description": "Complete all TODOs, remove the TODO markers, and rewrite comments for question_seven.py",
            "check": "MatchFileFragment",
            "options": {
                "fragment": "TODO",
                "count": 0,
                "exact": true
            },
            "status": false,
            "path": "questions/question_seven.py",
            "diagnostic": "Found 9 fragment(s) in the question_seven.py or the output while expecting exactly 0"
        },
        {
            "description": "Create a sufficient number of docstring (i.e., multiple-line) comments in question_seven.py",
            "check": "CountMultipleLineComments",
            "options": {
                "language": "Python",
                "count": 8,
                "exact": false
            },
            "status": false,
            "path": "questions/question_seven.py",
            "diagnostic": "Found 6 comment(s) in the question_seven.py or the output"
        },
        {
            "description": "Ensure that test_question_seven.py file exists in the tests/ directory",
            "check": "ConfirmFileExists",
            "status": true,
            "path": "tests/test_question_seven.py"
        },
        {
            "description": "Ensure that question_eight.py file exists in the questions/ directory",
            "check": "ConfirmFileExists",
            "status": true,
            "path": "questions/question_eight.py"
        },
        {
            "description": "Complete all TODOs, remove the TODO markers, and rewrite comments for question_eight.py",
            "check": "MatchFileFragment",
            "options": {
                "fragment": "TODO",
                "count": 0,
                "exact": true
            },
            "status": true,
            "path": "questions/question_eight.py"
        },
        {
            "description": "Create a sufficient number of docstring (i.e., multiple-line) comments in question_eight.py",
            "check": "CountMultipleLineComments",
            "options": {
                "language": "Python",
                "count": 4,
                "exact": false
            },
            "status": false,
            "path": "questions/question_eight.py",
            "diagnostic": "Found 1 comment(s) in the question_eight.py or the output"
        },
        {
            "description": "Ensure that test_question_eight.py file exists in the tests/ directory",
            "check": "ConfirmFileExists",
            "status": true,
            "path": "tests/test_question_eight.py"
        },
        {
            "description": "Run checks for Question 1 Part (a) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_one_part_a\"",
            "objectives": {
                "LO1": {
                    "degree": [
                        {
                            "CS": "I",
                            "rationale": "Manipulate the matrix data structure"
                        }
                    ]
                },
                "LO5": {
                    "degree": [
                        {
                            "CS": "D",
                            "rationale": "Search a matrix and compute summary values based on matrix"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 test_question_one.py                                                                                                 \u2502\n     \u2502 Minimum positive value in matrix: Expected 1, got 0                                                                  \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_one.py::test_find_minimum_value - assert 1 == 0                                           \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                            \u2502\n     \u2502   Name: tests/test_question_one.py::test_find_minimum_value                                \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_one.py \u2502\n     \u2502   Line number: 16                                                                          \u2502\n     \u2502   Message: assert 1 == 0                                                                   \u2502\n     \u2502                                                                                            \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                \u2502\n     \u2502 # File: tests/test_question_one.py Line: 24                                    \u2502\n     \u2502 @pytest.mark.question_one_part_a                                               \u2502\n     \u2502 def test_find_minimum_value():                                                 \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                                \u2502\n     \u2502     demarcate()                                                                \u2502\n     \u2502     # check 1: Matrix with positive values                                     \u2502\n     \u2502     matrix = [[5, 7, 3], [1, 9, 2], [6, 4, 8]]                                 \u2502\n     \u2502     minimum_positive = find_minimum_value(matrix)                              \u2502\n     \u2502     assert_and_print(1, minimum_positive, \"Minimum positive value in matrix\")  \u2502\n     \u2502     # check 2: Matrix with negative values                                     \u2502\n     \u2502     matrix = [[-2, 5, 1], [-3, 0, 6], [-1, -4, 7]]                             \u2502\n     \u2502     minimum_negative = find_minimum_value(matrix)                              \u2502\n     \u2502     assert_and_print(-4, minimum_negative, \"Minimum negative value in matrix\") \u2502\n     \u2502     # check 3: Matrix with a single element                                    \u2502\n     \u2502     matrix = [[10]]                                                            \u2502\n     \u2502     minimum_single = find_minimum_value(matrix)                                \u2502\n     \u2502     assert_and_print(10, minimum_single, \"Minimum value in single matrix\")     \u2502\n     \u2502     # check 4: Empty matrix                                                    \u2502\n     \u2502     matrix = []                                                                \u2502\n     \u2502     minimum_empty = find_minimum_value(matrix)                                 \u2502\n     \u2502     assert_and_print(None, minimum_empty, \"Minimum value in empty matrix\")     \u2502\n     \u2502                                                                                \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 1 Part (b) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_one_part_b\"",
            "objectives": {
                "LO1": {
                    "degree": [
                        {
                            "CS": "I",
                            "rationale": "Manipulate the matrix data structure"
                        }
                    ]
                },
                "LO5": {
                    "degree": [
                        {
                            "CS": "D",
                            "rationale": "Search a matrix and compute summary values based on matrix"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 Maximum positive value in matrix: Expected 9, got 0                                                                  \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_one.py::test_find_maximum_value - assert 9 == 0                                           \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                            \u2502\n     \u2502   Name: tests/test_question_one.py::test_find_maximum_value                                \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_one.py \u2502\n     \u2502   Line number: 16                                                                          \u2502\n     \u2502   Message: assert 9 == 0                                                                   \u2502\n     \u2502                                                                                            \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                               \u2502\n     \u2502 # File: tests/test_question_one.py Line: 46                                   \u2502\n     \u2502 @pytest.mark.question_one_part_b                                              \u2502\n     \u2502 def test_find_maximum_value():                                                \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                               \u2502\n     \u2502     # check 1: Matrix with positive values                                    \u2502\n     \u2502     matrix = [[5, 7, 3], [1, 9, 2], [6, 4, 8]]                                \u2502\n     \u2502     maximum_positive = find_maximum_value(matrix)                             \u2502\n     \u2502     assert_and_print(9, maximum_positive, \"Maximum positive value in matrix\") \u2502\n     \u2502     # check 2: Matrix with negative values                                    \u2502\n     \u2502     matrix = [[-2, 5, 1], [-3, 0, 6], [-1, -4, 7]]                            \u2502\n     \u2502     maximum_negative = find_maximum_value(matrix)                             \u2502\n     \u2502     assert_and_print(7, maximum_negative, \"Maximum negative value in matrix\") \u2502\n     \u2502     # check 3: Matrix with a single element                                   \u2502\n     \u2502     matrix = [[10]]                                                           \u2502\n     \u2502     maximum_single = find_maximum_value(matrix)                               \u2502\n     \u2502     assert_and_print(10, maximum_single, \"Maximum value in single matrix\")    \u2502\n     \u2502     # check 4: Empty matrix                                                   \u2502\n     \u2502     matrix = []                                                               \u2502\n     \u2502     maximum_empty = find_maximum_value(matrix)                                \u2502\n     \u2502     assert_and_print(None, maximum_empty, \"Maximum value in empty matrix\")    \u2502\n     \u2502                                                                               \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 1 Part (c) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_one_part_c\"",
            "objectives": {
                "LO1": {
                    "degree": [
                        {
                            "CS": "I",
                            "rationale": "Manipulate the matrix data structure"
                        }
                    ]
                },
                "LO5": {
                    "degree": [
                        {
                            "CS": "D",
                            "rationale": "Search a matrix and compute summary values based on matrix"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 Average value in matrix with positive numbers: Expected 5.0, got 0                                                   \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_one.py::test_find_average_value - assert 5.0 == 0                                         \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                            \u2502\n     \u2502   Name: tests/test_question_one.py::test_find_average_value                                \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_one.py \u2502\n     \u2502   Line number: 16                                                                          \u2502\n     \u2502   Message: assert 5.0 == 0                                                                 \u2502\n     \u2502                                                                                            \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                              \u2502\n     \u2502 # File: tests/test_question_one.py Line: 67                                                  \u2502\n     \u2502 @pytest.mark.question_one_part_c                                                             \u2502\n     \u2502 def test_find_average_value():                                                               \u2502\n     \u2502     \"\"\"Confirm correctness of a question part.\"\"\"                                            \u2502\n     \u2502     # check 1: Matrix with positive values                                                   \u2502\n     \u2502     matrix = [[5, 7, 3], [1, 9, 2], [6, 4, 8]]                                               \u2502\n     \u2502     average_positive = find_average_value(matrix)                                            \u2502\n     \u2502     # assert average_positive == pytest.approx(5.0), \"Average positive value in matrix\"      \u2502\n     \u2502     assert_and_print(5.0, average_positive, \"Average value in matrix with positive numbers\") \u2502\n     \u2502     # check 2: Matrix with negative values                                                   \u2502\n     \u2502     matrix = [[-2, 5, 1], [-3, 0, 6], [-1, -4, 7]]                                           \u2502\n     \u2502     average_negative = find_average_value(matrix)                                            \u2502\n     \u2502     assert_and_print(1.0, average_negative, \"Average value in matrix with negative numbers\") \u2502\n     \u2502     # check 3: Matrix with a single element                                                  \u2502\n     \u2502     matrix = [[10]]                                                                          \u2502\n     \u2502     average_single = find_average_value(matrix)                                              \u2502\n     \u2502     assert_and_print(10.0, average_single, \"Average value in single element matrix\")         \u2502\n     \u2502     # check 4: Empty matrix                                                                  \u2502\n     \u2502     matrix = []                                                                              \u2502\n     \u2502     average_empty = find_average_value(matrix)                                               \u2502\n     \u2502     assert_and_print(None, average_empty, \"Average value in empty matrix\")                   \u2502\n     \u2502                                                                                              \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 2 Part (a) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_two_part_a\"",
            "objectives": {
                "LO1": {
                    "degree": [
                        {
                            "CS": "I",
                            "rationale": "Reverse a string"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 test_question_two.py                                                                                                 \u2502\n     \u2502 Even number of characters: Expected !olleh, got                                                                      \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_two.py::test_reverse_string - AssertionError: assert '!olleh' == ''                       \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502   + !olleh                                                                                                           \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                            \u2502\n     \u2502   Name: tests/test_question_two.py::test_reverse_string                                    \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_two.py \u2502\n     \u2502   Line number: 16                                                                          \u2502\n     \u2502   Message: AssertionError: assert '!olleh' == ''                                           \u2502\n     \u2502                                                                                            \u2502\n     \u2502   + !olleh                                                                                 \u2502\n     \u2502                                                                                            \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                              \u2502\n     \u2502 # File: tests/test_question_two.py Line: 24                                  \u2502\n     \u2502 @pytest.mark.question_two_part_a                                             \u2502\n     \u2502 def test_reverse_string():                                                   \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                              \u2502\n     \u2502     demarcate()                                                              \u2502\n     \u2502     # check 1: short string with even number of characters                   \u2502\n     \u2502     string = \"hello!\"                                                        \u2502\n     \u2502     reversed_string = reverse_str(string)                                    \u2502\n     \u2502     assert_and_print(\"!olleh\", reversed_string, \"Even number of characters\") \u2502\n     \u2502     # check 2: short string with odd number of characters                    \u2502\n     \u2502     string = \"world\"                                                         \u2502\n     \u2502     reversed_string = reverse_str(string)                                    \u2502\n     \u2502     assert_and_print(\"dlrow\", reversed_string, \"Odd number of characters\")   \u2502\n     \u2502     # check 3: short string with non-standard characters                     \u2502\n     \u2502     string = \"$%^&*\"                                                         \u2502\n     \u2502     reversed_string = reverse_str(string)                                    \u2502\n     \u2502     assert_and_print(\"*&^%$\", reversed_string, \"Non-standard characters\")    \u2502\n     \u2502     # check 4: empty string                                                  \u2502\n     \u2502     string = \"\"                                                              \u2502\n     \u2502     reversed_string = reverse_str(string)                                    \u2502\n     \u2502     assert_and_print(\"\", reversed_string, \"Empty string of no characters\")   \u2502\n     \u2502                                                                              \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 2 Part (b) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_two_part_b\"",
            "objectives": {
                "LO1": {
                    "degree": [
                        {
                            "CS": "I",
                            "rationale": "Reverse a string-based encoding of an integer"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 test_question_two.py                                                                                                 \u2502\n     \u2502 Even number of numerals: Expected 1234, got 0                                                                        \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_two.py::test_reverse_number - assert 1234 == 0                                            \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                            \u2502\n     \u2502   Name: tests/test_question_two.py::test_reverse_number                                    \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_two.py \u2502\n     \u2502   Line number: 16                                                                          \u2502\n     \u2502   Message: assert 1234 == 0                                                                \u2502\n     \u2502                                                                                            \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                         \u2502\n     \u2502 # File: tests/test_question_two.py Line: 46                             \u2502\n     \u2502 @pytest.mark.question_two_part_b                                        \u2502\n     \u2502 def test_reverse_number():                                              \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                         \u2502\n     \u2502     demarcate()                                                         \u2502\n     \u2502     # check 1: short number with even number of numerals                \u2502\n     \u2502     number = 4321                                                       \u2502\n     \u2502     reversed_number = reverse_number(number)                            \u2502\n     \u2502     assert_and_print(1234, reversed_number, \"Even number of numerals\")  \u2502\n     \u2502     # check 2: short number with odd number of numerals                 \u2502\n     \u2502     number = 54321                                                      \u2502\n     \u2502     reversed_number = reverse_number(number)                            \u2502\n     \u2502     assert_and_print(12345, reversed_number, \"Odd number of numerals\")  \u2502\n     \u2502     # check 3: short number with non-standard numerals                  \u2502\n     \u2502     number = 12340000                                                   \u2502\n     \u2502     reversed_number = reverse_number(number)                            \u2502\n     \u2502     assert_and_print(4321, reversed_number, \"Non-standard numerals\")    \u2502\n     \u2502     # check 4: empty number                                             \u2502\n     \u2502     number = 0                                                          \u2502\n     \u2502     reversed_number = reverse_number(number)                            \u2502\n     \u2502     assert_and_print(0, reversed_number, \"Empty number of no numerals\") \u2502\n     \u2502                                                                         \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 2 Part (c) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_two_part_c\"",
            "objectives": {
                "LO1": {
                    "degree": [
                        {
                            "CS": "I",
                            "rationale": "Encode results of a computation in a nested dictionary"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 test_question_two.py                                                                                                 \u2502\n     \u2502 Even number of characters: Expected {'hello!': {'count': '6', 'reversed': '!olleh'}}, got {'': {'count': '',         \u2502\n     \u2502 'reversed': ''}}                                                                                                     \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_two.py::test_reverse_count - AssertionError: assert {'hello!': {'...d': '!olleh'}} ==     \u2502\n     \u2502 {'': {'count'...eversed': ''}}                                                                                       \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502   Left contains 1 more item:                                                                                         \u2502\n     \u2502   {'hello!': {'count': '6', 'reversed': '!olleh'}}                                                                   \u2502\n     \u2502   Right contains 1 more item:                                                                                        \u2502\n     \u2502   {'': {'count': '', 'reversed': ''}}                                                                                \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502   Full diff:                                                                                                         \u2502\n     \u2502     {                                                                                                                \u2502\n     \u2502   -     '': {                                                                                                        \u2502\n     \u2502   +     'hello!': {                                                                                                  \u2502\n     \u2502   ?      ++++++                                                                                                      \u2502\n     \u2502   -         'count': '',                                                                                             \u2502\n     \u2502   +         'count': '6',                                                                                            \u2502\n     \u2502   ?                   +                                                                                              \u2502\n     \u2502   -         'reversed': '',                                                                                          \u2502\n     \u2502   +         'reversed': '!olleh',                                                                                    \u2502\n     \u2502   ?                      ++++++                                                                                      \u2502\n     \u2502         },                                                                                                           \u2502\n     \u2502     }                                                                                                                \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                    \u2502\n     \u2502   Name: tests/test_question_two.py::test_reverse_count                                             \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_two.py         \u2502\n     \u2502   Line number: 16                                                                                  \u2502\n     \u2502   Message: AssertionError: assert {'hello!': {'...d': '!olleh'}} == {'': {'count'...eversed': ''}} \u2502\n     \u2502                                                                                                    \u2502\n     \u2502   Left contains 1 more item:                                                                       \u2502\n     \u2502   {'hello!': {'count': '6', 'reversed': '!olleh'}}                                                 \u2502\n     \u2502   Right contains 1 more item:                                                                      \u2502\n     \u2502   {'': {'count': '', 'reversed': ''}}                                                              \u2502\n     \u2502                                                                                                    \u2502\n     \u2502   Full diff:                                                                                       \u2502\n     \u2502     {                                                                                              \u2502\n     \u2502   -     '': {                                                                                      \u2502\n     \u2502   +     'hello!': {                                                                                \u2502\n     \u2502   ?      ++++++                                                                                    \u2502\n     \u2502   -         'count': '',                                                                           \u2502\n     \u2502   +         'count': '6',                                                                          \u2502\n     \u2502   ?                   +                                                                            \u2502\n     \u2502   -         'reversed': '',                                                                        \u2502\n     \u2502   +         'reversed': '!olleh',                                                                  \u2502\n     \u2502   ?                      ++++++                                                                    \u2502\n     \u2502         },                                                                                         \u2502\n     \u2502     }                                                                                              \u2502\n     \u2502                                                                                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                              \u2502\n     \u2502 # File: tests/test_question_two.py Line: 68                                  \u2502\n     \u2502 @pytest.mark.question_two_part_c                                             \u2502\n     \u2502 def test_reverse_count():                                                    \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                              \u2502\n     \u2502     demarcate()                                                              \u2502\n     \u2502     # check 1: short string with even number of characters                   \u2502\n     \u2502     string = \"hello!\"                                                        \u2502\n     \u2502     reversed_string = reverse_count(string)                                  \u2502\n     \u2502     expected = {\"hello!\": {\"count\": \"6\", \"reversed\": \"!olleh\"}}              \u2502\n     \u2502     assert_and_print(expected, reversed_string, \"Even number of characters\") \u2502\n     \u2502     # check 2: short string with odd number of characters                    \u2502\n     \u2502     string = \"world\"                                                         \u2502\n     \u2502     reversed_string = reverse_count(string)                                  \u2502\n     \u2502     expected = {\"world\": {\"count\": \"5\", \"reversed\": \"dlrow\"}}                \u2502\n     \u2502     assert_and_print(expected, reversed_string, \"Odd number of characters\")  \u2502\n     \u2502     # check 3: string with non-standard characters                           \u2502\n     \u2502     string = \"h3ll0!\"                                                        \u2502\n     \u2502     reversed_string = reverse_count(string)                                  \u2502\n     \u2502     expected = {\"h3ll0!\": {\"count\": \"6\", \"reversed\": \"!0ll3h\"}}              \u2502\n     \u2502     assert_and_print(expected, reversed_string, \"Non-standard characters\")   \u2502\n     \u2502     # check 4: empty string                                                  \u2502\n     \u2502     string = \"\"                                                              \u2502\n     \u2502     reversed_string = reverse_count(string)                                  \u2502\n     \u2502     expected = {\"\": {\"count\": \"0\", \"reversed\": \"\"}}                          \u2502\n     \u2502     assert_and_print(expected, reversed_string, \"Empty string\")              \u2502\n     \u2502                                                                              \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 3 Part (a) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_three_part_a\"",
            "objectives": {
                "LO5": {
                    "degree": [
                        {
                            "CS": "D",
                            "rationale": "Perform a summation on a list of integers"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 test_question_three.py                                                                                               \u2502\n     \u2502 Sum up to the stop value of 10: Expected 55, got 10                                                                  \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_three.py::test_sum_stop_int - assert 55 == 10                                             \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                              \u2502\n     \u2502   Name: tests/test_question_three.py::test_sum_stop_int                                      \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_three.py \u2502\n     \u2502   Line number: 16                                                                            \u2502\n     \u2502   Message: assert 55 == 10                                                                   \u2502\n     \u2502                                                                                              \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                         \u2502\n     \u2502 # File: tests/test_question_three.py Line: 24                           \u2502\n     \u2502 @pytest.mark.question_three_part_a                                      \u2502\n     \u2502 def test_sum_stop_int():                                                \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                         \u2502\n     \u2502     demarcate()                                                         \u2502\n     \u2502     # check 1: small summation                                          \u2502\n     \u2502     stop = 10                                                           \u2502\n     \u2502     sum = sum_stop_int(stop)                                            \u2502\n     \u2502     expected = 55                                                       \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum up to the stop value of 10\")   \u2502\n     \u2502     # check 2: larger summation                                         \u2502\n     \u2502     stop = 100                                                          \u2502\n     \u2502     sum = sum_stop_int(stop)                                            \u2502\n     \u2502     expected = 5050                                                     \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum up to the stop value of 100\")  \u2502\n     \u2502     # check 3: summation with stop value of 0                           \u2502\n     \u2502     stop = 0                                                            \u2502\n     \u2502     sum = sum_stop_int(stop)                                            \u2502\n     \u2502     expected = 0                                                        \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum up to the stop value of 0\")    \u2502\n     \u2502     # check 4: summation with negative stop value                       \u2502\n     \u2502     stop = -10                                                          \u2502\n     \u2502     sum = sum_stop_int(stop)                                            \u2502\n     \u2502     expected = 0                                                        \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum up to the stop value of -10\")\\ \u2502\n     \u2502                                                                         \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 3 Part (b) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_three_part_b\"",
            "objectives": {
                "LO5": {
                    "degree": [
                        {
                            "CS": "D",
                            "rationale": "Perform a summation on a list of floating-point values"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 test_question_three.py                                                                                               \u2502\n     \u2502 Sum up to the stop value of 10.0 with step size of 1.0: Expected 55.0, got 10.0                                      \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_three.py::test_sum_stop_float - assert 55.0 == 10.0                                       \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                              \u2502\n     \u2502   Name: tests/test_question_three.py::test_sum_stop_float                                    \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_three.py \u2502\n     \u2502   Line number: 16                                                                            \u2502\n     \u2502   Message: assert 55.0 == 10.0                                                               \u2502\n     \u2502                                                                                              \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                \u2502\n     \u2502 # File: tests/test_question_three.py Line: 50                                                  \u2502\n     \u2502 @pytest.mark.question_three_part_b                                                             \u2502\n     \u2502 def test_sum_stop_float():                                                                     \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                                                \u2502\n     \u2502     demarcate()                                                                                \u2502\n     \u2502     # check 1: small summation                                                                 \u2502\n     \u2502     stop = 10.0                                                                                \u2502\n     \u2502     step = 1.0                                                                                 \u2502\n     \u2502     sum = sum_stop_float(stop, step)                                                           \u2502\n     \u2502     expected = 55.0                                                                            \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum up to the stop value of 10.0 with step size of 1.0\")  \u2502\n     \u2502     # check 2: larger summation                                                                \u2502\n     \u2502     stop = 100.0                                                                               \u2502\n     \u2502     step = 1.0                                                                                 \u2502\n     \u2502     sum = sum_stop_float(stop, step)                                                           \u2502\n     \u2502     expected = 5050.0                                                                          \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum up to the stop value of 100.0 with step size of 1.0\") \u2502\n     \u2502     # check 3: summation with stop value of 0                                                  \u2502\n     \u2502     stop = 0.0                                                                                 \u2502\n     \u2502     step = 1.0                                                                                 \u2502\n     \u2502     sum = sum_stop_float(stop, step)                                                           \u2502\n     \u2502     expected = 0.0                                                                             \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum up to the stop value of 0.0 with step size of 1.0\")   \u2502\n     \u2502     # check 4: summation with negative stop value                                              \u2502\n     \u2502     stop = -10.0                                                                               \u2502\n     \u2502     step = 1.0                                                                                 \u2502\n     \u2502     sum = sum_stop_float(stop, step)                                                           \u2502\n     \u2502     expected = 0.0                                                                             \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum up to the stop value of -10.0 with step size of 1.0\") \u2502\n     \u2502                                                                                                \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 3 Part (c) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_three_part_c\"",
            "objectives": {
                "LO5": {
                    "degree": [
                        {
                            "CS": "D",
                            "rationale": "Perform a summation with select data in a list of dictionaries"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 test_question_three.py                                                                                               \u2502\n     \u2502 Sum of function calls in a small dictionary: Expected 10, got 0                                                      \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_three.py::test_sum_function_calls - assert 10 == 0                                        \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                              \u2502\n     \u2502   Name: tests/test_question_three.py::test_sum_function_calls                                \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_three.py \u2502\n     \u2502   Line number: 16                                                                            \u2502\n     \u2502   Message: assert 10 == 0                                                                    \u2502\n     \u2502                                                                                              \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                         \u2502\n     \u2502 # File: tests/test_question_three.py Line: 80                                           \u2502\n     \u2502 @pytest.mark.question_three_part_c                                                      \u2502\n     \u2502 def test_sum_function_calls():                                                          \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                                         \u2502\n     \u2502     demarcate()                                                                         \u2502\n     \u2502     # check 1: small dictionary                                                         \u2502\n     \u2502     function_calls = {\"func1\": 5, \"func2\": 5}                                           \u2502\n     \u2502     sum = sum_function_call_counts(function_calls)                                      \u2502\n     \u2502     expected = 10                                                                       \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum of function calls in a small dictionary\")      \u2502\n     \u2502     # check 2: larger dictionary                                                        \u2502\n     \u2502     function_calls = {\"func1\": 50, \"func2\": 50, \"func3\": 100}                           \u2502\n     \u2502     sum = sum_function_call_counts(function_calls)                                      \u2502\n     \u2502     expected = 200                                                                      \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum of function calls in a larger dictionary\")     \u2502\n     \u2502     # check 3: dictionary with a function not called                                    \u2502\n     \u2502     function_calls = {\"func1\": 0, \"func2\": 50, \"func3\": 100}                            \u2502\n     \u2502     sum = sum_function_call_counts(function_calls)                                      \u2502\n     \u2502     expected = 150                                                                      \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum of function calls with a function not called\") \u2502\n     \u2502     # check 4: empty dictionary                                                         \u2502\n     \u2502     function_calls = {}                                                                 \u2502\n     \u2502     sum = sum_function_call_counts(function_calls)                                      \u2502\n     \u2502     expected = 0                                                                        \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum of function calls in an empty dictionary\")     \u2502\n     \u2502                                                                                         \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 4 Part (a) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_four_part_a\"",
            "objectives": {
                "LO1": {
                    "degree": [
                        {
                            "CS": "I",
                            "rationale": "Use the set data structure to detect duplicate integer values"
                        }
                    ]
                },
                "LO5": {
                    "degree": [
                        {
                            "CS": "D",
                            "rationale": "Detect duplicate values in a list of integers"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 test_question_four.py                                                                                                \u2502\n     \u2502 Small list with int duplicates: Expected True, got False                                                             \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_four.py::test_duplicates_int - assert True == False                                       \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                             \u2502\n     \u2502   Name: tests/test_question_four.py::test_duplicates_int                                    \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_four.py \u2502\n     \u2502   Line number: 17                                                                           \u2502\n     \u2502   Message: assert True == False                                                             \u2502\n     \u2502                                                                                             \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                             \u2502\n     \u2502 # File: tests/test_question_four.py Line: 25                                \u2502\n     \u2502 @pytest.mark.question_four_part_a                                           \u2502\n     \u2502 def test_duplicates_int():                                                  \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                             \u2502\n     \u2502     demarcate()                                                             \u2502\n     \u2502     # check 1: small list with duplicates                                   \u2502\n     \u2502     data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1]                                   \u2502\n     \u2502     detected = detect_duplicates_int(data)                                  \u2502\n     \u2502     expected = True                                                         \u2502\n     \u2502     assert_and_print(expected, detected, \"Small list with int duplicates\")  \u2502\n     \u2502     # check 2: larger list with duplicates                                  \u2502\n     \u2502     data = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10]                    \u2502\n     \u2502     detected = detect_duplicates_int(data)                                  \u2502\n     \u2502     expected = True                                                         \u2502\n     \u2502     assert_and_print(expected, detected, \"Larger list with int duplicates\") \u2502\n     \u2502     # check 3: list without duplicates                                      \u2502\n     \u2502     data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]                                  \u2502\n     \u2502     detected = detect_duplicates_int(data)                                  \u2502\n     \u2502     expected = False                                                        \u2502\n     \u2502     assert_and_print(expected, detected, \"List without int duplicates\")     \u2502\n     \u2502     # check 4: empty list                                                   \u2502\n     \u2502     data = []                                                               \u2502\n     \u2502     detected = detect_duplicates_int(data)                                  \u2502\n     \u2502     expected = False                                                        \u2502\n     \u2502     assert_and_print(expected, detected, \"Empty list with no int values\")   \u2502\n     \u2502                                                                             \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 4 Part (b) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_four_part_b\"",
            "objectives": {
                "LO1": {
                    "degree": [
                        {
                            "CS": "I",
                            "rationale": "Use the set data structure to detect duplicate string values"
                        }
                    ]
                },
                "LO5": {
                    "degree": [
                        {
                            "CS": "D",
                            "rationale": "Detect duplicate values in a list of strings"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 Small list with str duplicates: Expected True, got True                                                              \u2502\n     \u2502 Larger list with str duplicates: Expected True, got True                                                             \u2502\n     \u2502 List without str duplicates: Expected False, got True                                                                \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_four.py::test_duplicates_str - assert False == True                                       \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                             \u2502\n     \u2502   Name: tests/test_question_four.py::test_duplicates_str                                    \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_four.py \u2502\n     \u2502   Line number: 17                                                                           \u2502\n     \u2502   Message: assert False == True                                                             \u2502\n     \u2502                                                                                             \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                \u2502\n     \u2502 # File: tests/test_question_four.py Line: 51                                   \u2502\n     \u2502 @pytest.mark.question_four_part_b                                              \u2502\n     \u2502 def test_duplicates_str():                                                     \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                                \u2502\n     \u2502     # check 1: small list with duplicates                                      \u2502\n     \u2502     data = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"1\"]                  \u2502\n     \u2502     detected = detect_duplicates_str(data)                                     \u2502\n     \u2502     expected = True                                                            \u2502\n     \u2502     assert_and_print(expected, detected, \"Small list with str duplicates\")     \u2502\n     \u2502     # check 2: larger list with duplicates                                     \u2502\n     \u2502     data = [\"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"10\"] \u2502\n     \u2502     detected = detect_duplicates_str(data)                                     \u2502\n     \u2502     expected = True                                                            \u2502\n     \u2502     assert_and_print(expected, detected, \"Larger list with str duplicates\")    \u2502\n     \u2502     # check 3: list without duplicates                                         \u2502\n     \u2502     data = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]                 \u2502\n     \u2502     detected = detect_duplicates_str(data)                                     \u2502\n     \u2502     expected = False                                                           \u2502\n     \u2502     assert_and_print(expected, detected, \"List without str duplicates\")        \u2502\n     \u2502     # check 4: empty list                                                      \u2502\n     \u2502     data = []                                                                  \u2502\n     \u2502     detected = detect_duplicates_str(data)                                     \u2502\n     \u2502     expected = False                                                           \u2502\n     \u2502     assert_and_print(expected, detected, \"Empty list with no str values\")      \u2502\n     \u2502                                                                                \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 4 Part (c) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_four_part_c\"",
            "objectives": {
                "LO1": {
                    "degree": [
                        {
                            "CS": "I",
                            "rationale": "Detect duplicate values in a list of Gene objects"
                        }
                    ]
                },
                "LO5": {
                    "degree": [
                        {
                            "CS": "D",
                            "rationale": "Use nested iteration constructs to detect duplicate Genes"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 Small list with gene duplicates: Expected True, got True                                                             \u2502\n     \u2502 Small list without gene duplicates: Expected False, got True                                                         \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_four.py::test_duplicates_gene - assert False == True                                      \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                             \u2502\n     \u2502   Name: tests/test_question_four.py::test_duplicates_gene                                   \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_four.py \u2502\n     \u2502   Line number: 17                                                                           \u2502\n     \u2502   Message: assert False == True                                                             \u2502\n     \u2502                                                                                             \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                \u2502\n     \u2502 # File: tests/test_question_four.py Line: 76                                   \u2502\n     \u2502 @pytest.mark.question_four_part_c                                              \u2502\n     \u2502 def test_duplicates_gene():                                                    \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                                \u2502\n     \u2502     # check 1: small list with two genes that are duplicates                   \u2502\n     \u2502     data = [                                                                   \u2502\n     \u2502         Gene(\"AADACL3\", 5, \"Arylacetamide deacetylase-like 3\"),                \u2502\n     \u2502         Gene(\"AADACL4\", 5, \"Arylacetamide deacetylase-like 4\"),                \u2502\n     \u2502     ]                                                                          \u2502\n     \u2502     detected = detect_duplicates_gene(data)                                    \u2502\n     \u2502     expected = True                                                            \u2502\n     \u2502     assert_and_print(expected, detected, \"Small list with gene duplicates\")    \u2502\n     \u2502     # check 2: small list with two genes that are not duplicates               \u2502\n     \u2502     data = [                                                                   \u2502\n     \u2502         Gene(\"FPGT02\", 4, \"Fucose-1-phosphate guanylyltransferase\"),           \u2502\n     \u2502         Gene(\"AADACL4\", 5, \"Arylacetamide deacetylase-like 4\"),                \u2502\n     \u2502     ]                                                                          \u2502\n     \u2502     detected = detect_duplicates_gene(data)                                    \u2502\n     \u2502     expected = False                                                           \u2502\n     \u2502     assert_and_print(expected, detected, \"Small list without gene duplicates\") \u2502\n     \u2502     # check 3: larger list with duplicates                                     \u2502\n     \u2502     data = [                                                                   \u2502\n     \u2502         Gene(\"AADACL3\", 5, \"Arylacetamide deacetylase-like 3\"),                \u2502\n     \u2502         Gene(\"FPGT02\", 4, \"Fucose-1-phosphate guanylyltransferase\"),           \u2502\n     \u2502         Gene(\"AADACL4\", 5, \"Arylacetamide deacetylase-like 4\"),                \u2502\n     \u2502         Gene(\"AADACL3\", 5, \"Arylacetamide deacetylase-like 3\"),                \u2502\n     \u2502         Gene(\"AADACL4\", 5, \"Arylacetamide deacetylase-like 4\"),                \u2502\n     \u2502     ]                                                                          \u2502\n     \u2502     detected = detect_duplicates_gene(data)                                    \u2502\n     \u2502     expected = True                                                            \u2502\n     \u2502     assert_and_print(expected, detected, \"Larger list with gene duplicates\")   \u2502\n     \u2502     # check 4: empty list                                                      \u2502\n     \u2502     data = []                                                                  \u2502\n     \u2502     detected = detect_duplicates_gene(data)                                    \u2502\n     \u2502     expected = False                                                           \u2502\n     \u2502     assert_and_print(expected, detected, \"Empty list\")                         \u2502\n     \u2502                                                                                \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 5 Part (a) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_five_part_a\"",
            "objectives": {
                "LO1": {
                    "degree": [
                        {
                            "CS": "I",
                            "rationale": "Implement a stack data structure using a list"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 test_question_five.py                                                                                                \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_five.py::test_find_minimum_value - Failed: DID NOT RAISE <class 'IndexError'>             \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                             \u2502\n     \u2502   Name: tests/test_question_five.py::test_find_minimum_value                                \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_five.py \u2502\n     \u2502   Line number: 31                                                                           \u2502\n     \u2502   Message: Failed: DID NOT RAISE <class 'IndexError'>                                       \u2502\n     \u2502                                                                                             \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                    \u2502\n     \u2502 # File: tests/test_question_five.py Line: 26                       \u2502\n     \u2502 @pytest.mark.question_five_part_a                                  \u2502\n     \u2502 def test_find_minimum_value():                                     \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                    \u2502\n     \u2502     demarcate()                                                    \u2502\n     \u2502     stack = ListStack()                                            \u2502\n     \u2502     with pytest.raises(IndexError):                                \u2502\n     \u2502         stack.pop()                                                \u2502\n     \u2502     stack.push(1)                                                  \u2502\n     \u2502     stack.push(2)                                                  \u2502\n     \u2502     stack.push(3)                                                  \u2502\n     \u2502     popped_element = stack.pop()                                   \u2502\n     \u2502     assert_and_print(popped_element, 3, \"Popped element\")          \u2502\n     \u2502     assert_and_print(stack.peek(), 2, \"Peeked element\")            \u2502\n     \u2502     assert_and_print(len(stack), 2, \"Length of stack\")             \u2502\n     \u2502     assert_and_print(stack.isempty(), False, \"Emptiness of stack\") \u2502\n     \u2502                                                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 5 Part (b) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_five_part_b\"",
            "objectives": {
                "LO1": {
                    "degree": [
                        {
                            "CS": "I",
                            "rationale": "Use the double-ended queue to process documents in a list"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 Document processing some: Expected {'doc1': 1, 'doc2': 2, 'doc3': 3}, got {}                                         \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_five.py::test_process_documents - AssertionError: assert {'doc1': 1, '... 2, 'doc3': 3}   \u2502\n     \u2502 == {}                                                                                                                \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502   Left contains 3 more items:                                                                                        \u2502\n     \u2502   {'doc1': 1, 'doc2': 2, 'doc3': 3}                                                                                  \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502   Full diff:                                                                                                         \u2502\n     \u2502   - {}                                                                                                               \u2502\n     \u2502   + {                                                                                                                \u2502\n     \u2502   +     'doc1': 1,                                                                                                   \u2502\n     \u2502   +     'doc2': 2,                                                                                                   \u2502\n     \u2502   +     'doc3': 3,                                                                                                   \u2502\n     \u2502   + }                                                                                                                \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                             \u2502\n     \u2502   Name: tests/test_question_five.py::test_process_documents                                 \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_five.py \u2502\n     \u2502   Line number: 18                                                                           \u2502\n     \u2502   Message: AssertionError: assert {'doc1': 1, '... 2, 'doc3': 3} == {}                      \u2502\n     \u2502                                                                                             \u2502\n     \u2502   Left contains 3 more items:                                                               \u2502\n     \u2502   {'doc1': 1, 'doc2': 2, 'doc3': 3}                                                         \u2502\n     \u2502                                                                                             \u2502\n     \u2502   Full diff:                                                                                \u2502\n     \u2502   - {}                                                                                      \u2502\n     \u2502   + {                                                                                       \u2502\n     \u2502   +     'doc1': 1,                                                                          \u2502\n     \u2502   +     'doc2': 2,                                                                          \u2502\n     \u2502   +     'doc3': 3,                                                                          \u2502\n     \u2502   + }                                                                                       \u2502\n     \u2502                                                                                             \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                   \u2502\n     \u2502 # File: tests/test_question_five.py Line: 43                                      \u2502\n     \u2502 @pytest.mark.question_five_part_b                                                 \u2502\n     \u2502 def test_process_documents():                                                     \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                                   \u2502\n     \u2502     documents = deque([\"doc1\", \"doc2\", \"doc3\"])                                   \u2502\n     \u2502     expected_output = {\"doc1\": 1, \"doc2\": 2, \"doc3\": 3}                           \u2502\n     \u2502     assert_and_print(                                                             \u2502\n     \u2502         expected_output, process_documents(documents), \"Document processing some\" \u2502\n     \u2502     )                                                                             \u2502\n     \u2502     documents = deque([])                                                         \u2502\n     \u2502     expected_output = {}                                                          \u2502\n     \u2502     assert_and_print(                                                             \u2502\n     \u2502         expected_output, process_documents(documents), \"Document processing none\" \u2502\n     \u2502     )                                                                             \u2502\n     \u2502                                                                                   \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 5 Part (c) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_five_part_c\"",
            "objectives": {
                "LO1": {
                    "degree": [
                        {
                            "CS": "I",
                            "rationale": "Use the priority queue to process documents in a list"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 Document processing some: Expected {'doc1': 3, 'doc2': 2, 'doc3': 1}, got {}                                         \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_five.py::test_process_documents_with_priority - AssertionError: assert {'doc1': 3, '...   \u2502\n     \u2502 2, 'doc3': 1} == {}                                                                                                  \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502   Left contains 3 more items:                                                                                        \u2502\n     \u2502   {'doc1': 3, 'doc2': 2, 'doc3': 1}                                                                                  \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502   Full diff:                                                                                                         \u2502\n     \u2502   - {}                                                                                                               \u2502\n     \u2502   + {                                                                                                                \u2502\n     \u2502   +     'doc1': 3,                                                                                                   \u2502\n     \u2502   +     'doc2': 2,                                                                                                   \u2502\n     \u2502   +     'doc3': 1,                                                                                                   \u2502\n     \u2502   + }                                                                                                                \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                             \u2502\n     \u2502   Name: tests/test_question_five.py::test_process_documents_with_priority                   \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_five.py \u2502\n     \u2502   Line number: 18                                                                           \u2502\n     \u2502   Message: AssertionError: assert {'doc1': 3, '... 2, 'doc3': 1} == {}                      \u2502\n     \u2502                                                                                             \u2502\n     \u2502   Left contains 3 more items:                                                               \u2502\n     \u2502   {'doc1': 3, 'doc2': 2, 'doc3': 1}                                                         \u2502\n     \u2502                                                                                             \u2502\n     \u2502   Full diff:                                                                                \u2502\n     \u2502   - {}                                                                                      \u2502\n     \u2502   + {                                                                                       \u2502\n     \u2502   +     'doc1': 3,                                                                          \u2502\n     \u2502   +     'doc2': 2,                                                                          \u2502\n     \u2502   +     'doc3': 1,                                                                          \u2502\n     \u2502   + }                                                                                       \u2502\n     \u2502                                                                                             \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                         \u2502\n     \u2502 # File: tests/test_question_five.py Line: 58            \u2502\n     \u2502 @pytest.mark.question_five_part_c                       \u2502\n     \u2502 def test_process_documents_with_priority():             \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"         \u2502\n     \u2502     documents = [(3, \"doc1\"), (2, \"doc2\"), (1, \"doc3\")] \u2502\n     \u2502     expected_output = {\"doc1\": 3, \"doc2\": 2, \"doc3\": 1} \u2502\n     \u2502     assert_and_print(                                   \u2502\n     \u2502         expected_output,                                \u2502\n     \u2502         priority_process_documents(documents),          \u2502\n     \u2502         \"Document processing some\",                     \u2502\n     \u2502     )                                                   \u2502\n     \u2502     documents = []                                      \u2502\n     \u2502     expected_output = {}                                \u2502\n     \u2502     assert_and_print(                                   \u2502\n     \u2502         expected_output,                                \u2502\n     \u2502         priority_process_documents(documents),          \u2502\n     \u2502         \"Document processing some\",                     \u2502\n     \u2502     )                                                   \u2502\n     \u2502                                                         \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 6 Part (a) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_six_part_a\"",
            "objectives": {
                "LO1": {
                    "degree": [
                        {
                            "CS": "I",
                            "rationale": "Process a list of integer values"
                        }
                    ]
                },
                "LO5": {
                    "degree": [
                        {
                            "CS": "D",
                            "rationale": "Sort a list of integer values"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 test_question_six.py                                                                                                 \u2502\n     \u2502 Small list sorting: Expected [1, 1, 2, 3, 4, 5, 6, 7, 8, 9], got []                                                  \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_six.py::test_sorting_int - assert [1, 1, 2, 3, 4, 5, ...] == []                           \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502   Left contains 10 more items, first extra item: 1                                                                   \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502   Full diff:                                                                                                         \u2502\n     \u2502   - []                                                                                                               \u2502\n     \u2502   + [                                                                                                                \u2502\n     \u2502   +     1,                                                                                                           \u2502\n     \u2502   +     1,                                                                                                           \u2502\n     \u2502   +     2,                                                                                                           \u2502\n     \u2502   +     3,                                                                                                           \u2502\n     \u2502   +     4,                                                                                                           \u2502\n     \u2502   +     5,                                                                                                           \u2502\n     \u2502   +     6,                                                                                                           \u2502\n     \u2502   +     7,                                                                                                           \u2502\n     \u2502   +     8,                                                                                                           \u2502\n     \u2502   +     9,                                                                                                           \u2502\n     \u2502   + ]                                                                                                                \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                            \u2502\n     \u2502   Name: tests/test_question_six.py::test_sorting_int                                       \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_six.py \u2502\n     \u2502   Line number: 17                                                                          \u2502\n     \u2502   Message: assert [1, 1, 2, 3, 4, 5, ...] == []                                            \u2502\n     \u2502                                                                                            \u2502\n     \u2502   Left contains 10 more items, first extra item: 1                                         \u2502\n     \u2502                                                                                            \u2502\n     \u2502   Full diff:                                                                               \u2502\n     \u2502   - []                                                                                     \u2502\n     \u2502   + [                                                                                      \u2502\n     \u2502   +     1,                                                                                 \u2502\n     \u2502   +     1,                                                                                 \u2502\n     \u2502   +     2,                                                                                 \u2502\n     \u2502   +     3,                                                                                 \u2502\n     \u2502   +     4,                                                                                 \u2502\n     \u2502   +     5,                                                                                 \u2502\n     \u2502   +     6,                                                                                 \u2502\n     \u2502   +     7,                                                                                 \u2502\n     \u2502   +     8,                                                                                 \u2502\n     \u2502   +     9,                                                                                 \u2502\n     \u2502   + ]                                                                                      \u2502\n     \u2502                                                                                            \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                           \u2502\n     \u2502 # File: tests/test_question_six.py Line: 25                               \u2502\n     \u2502 @pytest.mark.question_six_part_a                                          \u2502\n     \u2502 def test_sorting_int():                                                   \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                           \u2502\n     \u2502     demarcate()                                                           \u2502\n     \u2502     # check 1: small list                                                 \u2502\n     \u2502     data = [9, 1, 2, 8, 3, 7, 4, 6, 5, 1]                                 \u2502\n     \u2502     sorted_data = sort_data_int(data)                                     \u2502\n     \u2502     expected = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9]                             \u2502\n     \u2502     assert_and_print(expected, sorted_data, \"Small list sorting\")         \u2502\n     \u2502     # check 2: larger list                                                \u2502\n     \u2502     data = [100, 10, 20, 90, 30, 80, 40, 70, 50, 60, 10]                  \u2502\n     \u2502     sorted_data = sort_data_int(data)                                     \u2502\n     \u2502     expected = [10, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]              \u2502\n     \u2502     assert_and_print(expected, sorted_data, \"Large list sorting\")         \u2502\n     \u2502     # check 3: list without duplicates                                    \u2502\n     \u2502     data = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]                                \u2502\n     \u2502     sorted_data = sort_data_int(data)                                     \u2502\n     \u2502     expected = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]                            \u2502\n     \u2502     assert_and_print(expected, sorted_data, \"Non-duplicate list sorting\") \u2502\n     \u2502     # check 4: empty list                                                 \u2502\n     \u2502     data = []                                                             \u2502\n     \u2502     sorted_data = sort_data_int(data)                                     \u2502\n     \u2502     expected = []                                                         \u2502\n     \u2502     assert_and_print(expected, sorted_data, \"Empty list sorting\")         \u2502\n     \u2502                                                                           \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 6 Part (b) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_six_part_b\"",
            "objectives": {
                "LO1": {
                    "degree": [
                        {
                            "CS": "I",
                            "rationale": "Process a lists of string values"
                        }
                    ]
                },
                "LO5": {
                    "degree": [
                        {
                            "CS": "D",
                            "rationale": "Sort a list of string values"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 Small list sorting: Expected ['elderberry', 'date', 'cherry', 'banana', 'apple'], got []                             \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_six.py::test_sort_data_str - AssertionError: assert ['elderberry'...ana', 'apple'] == []  \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502   Left contains 5 more items, first extra item: 'elderberry'                                                         \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502   Full diff:                                                                                                         \u2502\n     \u2502   - []                                                                                                               \u2502\n     \u2502   + [                                                                                                                \u2502\n     \u2502   +     'elderberry',                                                                                                \u2502\n     \u2502   +     'date',                                                                                                      \u2502\n     \u2502   +     'cherry',                                                                                                    \u2502\n     \u2502   +     'banana',                                                                                                    \u2502\n     \u2502   +     'apple',                                                                                                     \u2502\n     \u2502   + ]                                                                                                                \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                            \u2502\n     \u2502   Name: tests/test_question_six.py::test_sort_data_str                                     \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_six.py \u2502\n     \u2502   Line number: 17                                                                          \u2502\n     \u2502   Message: AssertionError: assert ['elderberry'...ana', 'apple'] == []                     \u2502\n     \u2502                                                                                            \u2502\n     \u2502   Left contains 5 more items, first extra item: 'elderberry'                               \u2502\n     \u2502                                                                                            \u2502\n     \u2502   Full diff:                                                                               \u2502\n     \u2502   - []                                                                                     \u2502\n     \u2502   + [                                                                                      \u2502\n     \u2502   +     'elderberry',                                                                      \u2502\n     \u2502   +     'date',                                                                            \u2502\n     \u2502   +     'cherry',                                                                          \u2502\n     \u2502   +     'banana',                                                                          \u2502\n     \u2502   +     'apple',                                                                           \u2502\n     \u2502   + ]                                                                                      \u2502\n     \u2502                                                                                            \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                \u2502\n     \u2502 # File: tests/test_question_six.py Line: 51                                    \u2502\n     \u2502 @pytest.mark.question_six_part_b                                               \u2502\n     \u2502 def test_sort_data_str():                                                      \u2502\n     \u2502     \"\"\"Confirm correctness of sort_data_str function.\"\"\"                       \u2502\n     \u2502     # check 1: small list                                                      \u2502\n     \u2502     data = [\"banana\", \"apple\", \"cherry\", \"date\", \"elderberry\"]                 \u2502\n     \u2502     sorted_data = sort_data_str(data)                                          \u2502\n     \u2502     expected = [\"elderberry\", \"date\", \"cherry\", \"banana\", \"apple\"]             \u2502\n     \u2502     assert_and_print(expected, sorted_data, \"Small list sorting\")              \u2502\n     \u2502     # check 2: larger list                                                     \u2502\n     \u2502     data = [                                                                   \u2502\n     \u2502         \"banana\",                                                              \u2502\n     \u2502         \"apple\",                                                               \u2502\n     \u2502         \"cherry\",                                                              \u2502\n     \u2502         \"date\",                                                                \u2502\n     \u2502         \"elderberry\",                                                          \u2502\n     \u2502         \"fig\",                                                                 \u2502\n     \u2502         \"grape\",                                                               \u2502\n     \u2502         \"honeydew\",                                                            \u2502\n     \u2502         \"ice cream\",                                                           \u2502\n     \u2502         \"jackfruit\",                                                           \u2502\n     \u2502     ]                                                                          \u2502\n     \u2502     sorted_data = sort_data_str(data)                                          \u2502\n     \u2502     expected = [                                                               \u2502\n     \u2502         \"jackfruit\",                                                           \u2502\n     \u2502         \"ice cream\",                                                           \u2502\n     \u2502         \"honeydew\",                                                            \u2502\n     \u2502         \"grape\",                                                               \u2502\n     \u2502         \"fig\",                                                                 \u2502\n     \u2502         \"elderberry\",                                                          \u2502\n     \u2502         \"date\",                                                                \u2502\n     \u2502         \"cherry\",                                                              \u2502\n     \u2502         \"banana\",                                                              \u2502\n     \u2502         \"apple\",                                                               \u2502\n     \u2502     ]                                                                          \u2502\n     \u2502     assert_and_print(expected, sorted_data, \"Larger list sorting\")             \u2502\n     \u2502     # check 3: list without duplicates                                         \u2502\n     \u2502     data = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]                 \u2502\n     \u2502     sorted_data = sort_data_str(data)                                          \u2502\n     \u2502     expected = [\"elderberry\", \"date\", \"cherry\", \"banana\", \"apple\"]             \u2502\n     \u2502     assert_and_print(expected, sorted_data, \"List without duplicates sorting\") \u2502\n     \u2502     # check 4: empty list                                                      \u2502\n     \u2502     data = []                                                                  \u2502\n     \u2502     sorted_data = sort_data_str(data)                                          \u2502\n     \u2502     expected = []                                                              \u2502\n     \u2502     assert_and_print(expected, sorted_data, \"Empty list sorting\")              \u2502\n     \u2502                                                                                \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 6 Part (c) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_six_part_c\"",
            "objectives": {
                "LO1": {
                    "degree": [
                        {
                            "CS": "I",
                            "rationale": "Process a list of complex Gene objects"
                        }
                    ]
                },
                "LO5": {
                    "degree": [
                        {
                            "CS": "D",
                            "rationale": "Sort a list of Gene objects"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 Small list sorting: Expected [AADACL4 (5): Arylacetamide deacetylase-like 4], got []                                 \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_six.py::test_sort_genes - assert [AADACL4 (5):...tylase-like 4] == []                     \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502   Left contains one more item: AADACL4 (5): Arylacetamide deacetylase-like 4                                         \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502   Full diff:                                                                                                         \u2502\n     \u2502   - []                                                                                                               \u2502\n     \u2502   + [                                                                                                                \u2502\n     \u2502   +     AADACL4 (5): Arylacetamide deacetylase-like 4,                                                               \u2502\n     \u2502   + ]                                                                                                                \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                            \u2502\n     \u2502   Name: tests/test_question_six.py::test_sort_genes                                        \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_six.py \u2502\n     \u2502   Line number: 17                                                                          \u2502\n     \u2502   Message: assert [AADACL4 (5):...tylase-like 4] == []                                     \u2502\n     \u2502                                                                                            \u2502\n     \u2502   Left contains one more item: AADACL4 (5): Arylacetamide deacetylase-like 4               \u2502\n     \u2502                                                                                            \u2502\n     \u2502   Full diff:                                                                               \u2502\n     \u2502   - []                                                                                     \u2502\n     \u2502   + [                                                                                      \u2502\n     \u2502   +     AADACL4 (5): Arylacetamide deacetylase-like 4,                                     \u2502\n     \u2502   + ]                                                                                      \u2502\n     \u2502                                                                                            \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                    \u2502\n     \u2502 # File: tests/test_question_six.py Line: 98                        \u2502\n     \u2502 @pytest.mark.question_six_part_c                                   \u2502\n     \u2502 def test_sort_genes():                                             \u2502\n     \u2502     \"\"\"Confirm correctness of sort_genes function.\"\"\"              \u2502\n     \u2502     # check 1: small list                                          \u2502\n     \u2502     data = [                                                       \u2502\n     \u2502         Gene(\"AADACL4\", 5, \"Arylacetamide deacetylase-like 4\"),    \u2502\n     \u2502         Gene(\"AADACL3\", 5, \"Arylacetamide deacetylase-like 3\"),    \u2502\n     \u2502     ]                                                              \u2502\n     \u2502     sorted_genes = sort_genes(data)                                \u2502\n     \u2502     expected = [                                                   \u2502\n     \u2502         Gene(\"AADACL3\", 5, \"Arylacetamide deacetylase-like 3\"),    \u2502\n     \u2502         Gene(\"AADACL4\", 5, \"Arylacetamide deacetylase-like 4\"),    \u2502\n     \u2502     ]                                                              \u2502\n     \u2502     # check 2: singleton list                                      \u2502\n     \u2502     data = [                                                       \u2502\n     \u2502         Gene(\"AADACL4\", 5, \"Arylacetamide deacetylase-like 4\"),    \u2502\n     \u2502     ]                                                              \u2502\n     \u2502     sorted_genes = sort_genes(data)                                \u2502\n     \u2502     expected = [                                                   \u2502\n     \u2502         Gene(\"AADACL4\", 5, \"Arylacetamide deacetylase-like 4\"),    \u2502\n     \u2502     ]                                                              \u2502\n     \u2502     assert_and_print(expected, sorted_genes, \"Small list sorting\") \u2502\n     \u2502     # check 2: empty list                                          \u2502\n     \u2502     data = []                                                      \u2502\n     \u2502     sorted_genes = sort_genes(data)                                \u2502\n     \u2502     expected = []                                                  \u2502\n     \u2502     assert_and_print(expected, sorted_genes, \"Empty list sorting\") \u2502\n     \u2502                                                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 7 Part (a) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_seven_part_a\"",
            "objectives": {
                "LO1": {
                    "degree": [
                        {
                            "CS": "I",
                            "rationale": "Use a stack to process a tree"
                        }
                    ]
                },
                "LO5": {
                    "degree": [
                        {
                            "CS": "D",
                            "rationale": "Implement a depth-first traversal of a tree"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 Depth-first traversal output: Expected ['1', '2', '4', '5', '3', '6', '7'], got []                                   \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_seven.py::test_depth_first_traversal - AssertionError: assert ['1', '2', '4...'3', '6',   \u2502\n     \u2502 ...] == []                                                                                                           \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502   Left contains 7 more items, first extra item: '1'                                                                  \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502   Full diff:                                                                                                         \u2502\n     \u2502   - []                                                                                                               \u2502\n     \u2502   + [                                                                                                                \u2502\n     \u2502   +     '1',                                                                                                         \u2502\n     \u2502   +     '2',                                                                                                         \u2502\n     \u2502   +     '4',                                                                                                         \u2502\n     \u2502   +     '5',                                                                                                         \u2502\n     \u2502   +     '3',                                                                                                         \u2502\n     \u2502   +     '6',                                                                                                         \u2502\n     \u2502   +     '7',                                                                                                         \u2502\n     \u2502   + ]                                                                                                                \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                              \u2502\n     \u2502   Name: tests/test_question_seven.py::test_depth_first_traversal                             \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_seven.py \u2502\n     \u2502   Line number: 18                                                                            \u2502\n     \u2502   Message: AssertionError: assert ['1', '2', '4...'3', '6', ...] == []                       \u2502\n     \u2502                                                                                              \u2502\n     \u2502   Left contains 7 more items, first extra item: '1'                                          \u2502\n     \u2502                                                                                              \u2502\n     \u2502   Full diff:                                                                                 \u2502\n     \u2502   - []                                                                                       \u2502\n     \u2502   + [                                                                                        \u2502\n     \u2502   +     '1',                                                                                 \u2502\n     \u2502   +     '2',                                                                                 \u2502\n     \u2502   +     '4',                                                                                 \u2502\n     \u2502   +     '5',                                                                                 \u2502\n     \u2502   +     '3',                                                                                 \u2502\n     \u2502   +     '6',                                                                                 \u2502\n     \u2502   +     '7',                                                                                 \u2502\n     \u2502   + ]                                                                                        \u2502\n     \u2502                                                                                              \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                       \u2502\n     \u2502 # File: tests/test_question_seven.py Line: 26                                         \u2502\n     \u2502 @pytest.mark.question_seven_part_a                                                    \u2502\n     \u2502 def test_depth_first_traversal():                                                     \u2502\n     \u2502     \"\"\"Test the depth_first_traversal function.\"\"\"                                    \u2502\n     \u2502     # create a tree                                                                   \u2502\n     \u2502     root = Node(\"1\")                                                                  \u2502\n     \u2502     child1 = Node(\"2\")                                                                \u2502\n     \u2502     child2 = Node(\"3\")                                                                \u2502\n     \u2502     child1.children = [Node(\"4\"), Node(\"5\")]                                          \u2502\n     \u2502     child2.children = [Node(\"6\"), Node(\"7\")]                                          \u2502\n     \u2502     root.children = [child1, child2]                                                  \u2502\n     \u2502     tree = Tree(root)                                                                 \u2502\n     \u2502     # call the function                                                               \u2502\n     \u2502     depth_first_traversal(tree)                                                       \u2502\n     \u2502     # check the output                                                                \u2502\n     \u2502     expected_output = [\"1\", \"2\", \"4\", \"5\", \"3\", \"6\", \"7\"]                             \u2502\n     \u2502     assert_and_print(expected_output, tree.traversed, \"Depth-first traversal output\") \u2502\n     \u2502                                                                                       \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 7 Part (b) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_seven_part_b\"",
            "objectives": {
                "LO1": {
                    "degree": [
                        {
                            "CS": "I",
                            "rationale": "Use a queue to process a tree"
                        }
                    ]
                },
                "LO5": {
                    "degree": [
                        {
                            "CS": "D",
                            "rationale": "Implement a breadth-first traversal of a tree"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 Depth-first traversal output: Expected ['1', '2', '3', '4', '5', '6', '7'], got []                                   \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_seven.py::test_breadth_first_traversal - AssertionError: assert ['1', '2', '3...'5', '6', \u2502\n     \u2502 ...] == []                                                                                                           \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502   Left contains 7 more items, first extra item: '1'                                                                  \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502   Full diff:                                                                                                         \u2502\n     \u2502   - []                                                                                                               \u2502\n     \u2502   + [                                                                                                                \u2502\n     \u2502   +     '1',                                                                                                         \u2502\n     \u2502   +     '2',                                                                                                         \u2502\n     \u2502   +     '3',                                                                                                         \u2502\n     \u2502   +     '4',                                                                                                         \u2502\n     \u2502   +     '5',                                                                                                         \u2502\n     \u2502   +     '6',                                                                                                         \u2502\n     \u2502   +     '7',                                                                                                         \u2502\n     \u2502   + ]                                                                                                                \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                              \u2502\n     \u2502   Name: tests/test_question_seven.py::test_breadth_first_traversal                           \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_seven.py \u2502\n     \u2502   Line number: 18                                                                            \u2502\n     \u2502   Message: AssertionError: assert ['1', '2', '3...'5', '6', ...] == []                       \u2502\n     \u2502                                                                                              \u2502\n     \u2502   Left contains 7 more items, first extra item: '1'                                          \u2502\n     \u2502                                                                                              \u2502\n     \u2502   Full diff:                                                                                 \u2502\n     \u2502   - []                                                                                       \u2502\n     \u2502   + [                                                                                        \u2502\n     \u2502   +     '1',                                                                                 \u2502\n     \u2502   +     '2',                                                                                 \u2502\n     \u2502   +     '3',                                                                                 \u2502\n     \u2502   +     '4',                                                                                 \u2502\n     \u2502   +     '5',                                                                                 \u2502\n     \u2502   +     '6',                                                                                 \u2502\n     \u2502   +     '7',                                                                                 \u2502\n     \u2502   + ]                                                                                        \u2502\n     \u2502                                                                                              \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                       \u2502\n     \u2502 # File: tests/test_question_seven.py Line: 44                                         \u2502\n     \u2502 @pytest.mark.question_seven_part_b                                                    \u2502\n     \u2502 def test_breadth_first_traversal():                                                   \u2502\n     \u2502     \"\"\"Test the breadth_first_traversal function.\"\"\"                                  \u2502\n     \u2502     # create a tree                                                                   \u2502\n     \u2502     root = Node(\"1\")                                                                  \u2502\n     \u2502     child1 = Node(\"2\")                                                                \u2502\n     \u2502     child2 = Node(\"3\")                                                                \u2502\n     \u2502     child1.children = [Node(\"4\"), Node(\"5\")]                                          \u2502\n     \u2502     child2.children = [Node(\"6\"), Node(\"7\")]                                          \u2502\n     \u2502     root.children = [child1, child2]                                                  \u2502\n     \u2502     tree = Tree(root)                                                                 \u2502\n     \u2502     # call the function                                                               \u2502\n     \u2502     breadth_first_traversal(tree)                                                     \u2502\n     \u2502     # check the output                                                                \u2502\n     \u2502     expected_output = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]                             \u2502\n     \u2502     assert_and_print(expected_output, tree.traversed, \"Depth-first traversal output\") \u2502\n     \u2502                                                                                       \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 7 Part (c) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_seven_part_c\"",
            "objectives": {
                "LO1": {
                    "degree": [
                        {
                            "CS": "I",
                            "rationale": "Use a list to store the depths of nodes in tree"
                        }
                    ]
                },
                "LO5": {
                    "degree": [
                        {
                            "CS": "D",
                            "rationale": "Calculate the height of a tree"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 Height calculation output: Expected 2, got -1                                                                        \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_seven.py::test_calculate_height - assert 2 == -1                                          \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                              \u2502\n     \u2502   Name: tests/test_question_seven.py::test_calculate_height                                  \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_seven.py \u2502\n     \u2502   Line number: 18                                                                            \u2502\n     \u2502   Message: assert 2 == -1                                                                    \u2502\n     \u2502                                                                                              \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                 \u2502\n     \u2502 # File: tests/test_question_seven.py Line: 62                                   \u2502\n     \u2502 @pytest.mark.question_seven_part_c                                              \u2502\n     \u2502 def test_calculate_height():                                                    \u2502\n     \u2502     \"\"\"Test the height calculation function.\"\"\"                                 \u2502\n     \u2502     # create a tree                                                             \u2502\n     \u2502     root = Node(\"1\")                                                            \u2502\n     \u2502     child1 = Node(\"2\")                                                          \u2502\n     \u2502     child2 = Node(\"3\")                                                          \u2502\n     \u2502     child1.children = [Node(\"4\"), Node(\"5\")]                                    \u2502\n     \u2502     child2.children = [Node(\"6\"), Node(\"7\")]                                    \u2502\n     \u2502     root.children = [child1, child2]                                            \u2502\n     \u2502     tree = Tree(root)                                                           \u2502\n     \u2502     # call the function                                                         \u2502\n     \u2502     tree_height = calculate_height(tree.root)                                   \u2502\n     \u2502     # check the output                                                          \u2502\n     \u2502     expected_output = 2                                                         \u2502\n     \u2502     assert_and_print(expected_output, tree_height, \"Height calculation output\") \u2502\n     \u2502                                                                                 \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 8 Part (a) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_eight_part_a\"",
            "objectives": {
                "LO5": {
                    "degree": [
                        {
                            "CS": "D",
                            "rationale": "Implement a recursive binary search with list slicing"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 Item in list: Expected True, got False                                                                               \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_eight.py::test_recursive_binary_search_inefficient - assert True == False                 \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                              \u2502\n     \u2502   Name: tests/test_question_eight.py::test_recursive_binary_search_inefficient               \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_eight.py \u2502\n     \u2502   Line number: 16                                                                            \u2502\n     \u2502   Message: assert True == False                                                              \u2502\n     \u2502                                                                                              \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                    \u2502\n     \u2502 # File: tests/test_question_eight.py Line: 24                                      \u2502\n     \u2502 @pytest.mark.question_eight_part_a                                                 \u2502\n     \u2502 def test_recursive_binary_search_inefficient():                                    \u2502\n     \u2502     \"\"\"Test a function.\"\"\"                                                         \u2502\n     \u2502     # check 1: item in list                                                        \u2502\n     \u2502     data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]                                         \u2502\n     \u2502     item = 5                                                                       \u2502\n     \u2502     assert_and_print(                                                              \u2502\n     \u2502         True, recursive_binary_search_inefficient(data, item), \"Item in list\"      \u2502\n     \u2502     )                                                                              \u2502\n     \u2502     # check 2: item not in list                                                    \u2502\n     \u2502     item = 11                                                                      \u2502\n     \u2502     assert_and_print(                                                              \u2502\n     \u2502         False, recursive_binary_search_inefficient(data, item), \"Item not in list\" \u2502\n     \u2502     )                                                                              \u2502\n     \u2502     # check 3: empty list                                                          \u2502\n     \u2502     data = []                                                                      \u2502\n     \u2502     item = 1                                                                       \u2502\n     \u2502     assert_and_print(                                                              \u2502\n     \u2502         False, recursive_binary_search_inefficient(data, item), \"Empty list\"       \u2502\n     \u2502     )                                                                              \u2502\n     \u2502     # check 4: list with one element, item in list                                 \u2502\n     \u2502     data = [1]                                                                     \u2502\n     \u2502     item = 1                                                                       \u2502\n     \u2502     assert_and_print(                                                              \u2502\n     \u2502         True,                                                                      \u2502\n     \u2502         recursive_binary_search_inefficient(data, item),                           \u2502\n     \u2502         \"List with one element, item in list\",                                     \u2502\n     \u2502     )                                                                              \u2502\n     \u2502     # check 5: list with one element, item not in list                             \u2502\n     \u2502     item = 2                                                                       \u2502\n     \u2502     assert_and_print(                                                              \u2502\n     \u2502         False,                                                                     \u2502\n     \u2502         recursive_binary_search_inefficient(data, item),                           \u2502\n     \u2502         \"List with one element, item not in list\",                                 \u2502\n     \u2502     )                                                                              \u2502\n     \u2502                                                                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 8 Part (b) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_eight_part_b\"",
            "objectives": {
                "LO5": {
                    "degree": [
                        {
                            "CS": "D",
                            "rationale": "Implement a recursive binary search without list slicing"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 Item in list: Expected True, got False                                                                               \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_eight.py::test_recursive_binary_search_efficient - assert True == False                   \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                              \u2502\n     \u2502   Name: tests/test_question_eight.py::test_recursive_binary_search_efficient                 \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_eight.py \u2502\n     \u2502   Line number: 16                                                                            \u2502\n     \u2502   Message: assert True == False                                                              \u2502\n     \u2502                                                                                              \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                          \u2502\n     \u2502 # File: tests/test_question_eight.py Line: 61                                            \u2502\n     \u2502 @pytest.mark.question_eight_part_b                                                       \u2502\n     \u2502 def test_recursive_binary_search_efficient():                                            \u2502\n     \u2502     \"\"\"Test a function.\"\"\"                                                               \u2502\n     \u2502     # check 1: item in list                                                              \u2502\n     \u2502     data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]                                               \u2502\n     \u2502     item = 5                                                                             \u2502\n     \u2502     assert_and_print(                                                                    \u2502\n     \u2502         True, recursive_binary_search_efficient(data, item), \"Item in list\"              \u2502\n     \u2502     )                                                                                    \u2502\n     \u2502     # check 2: item not in list                                                          \u2502\n     \u2502     item = 11                                                                            \u2502\n     \u2502     assert_and_print(                                                                    \u2502\n     \u2502         False, recursive_binary_search_efficient(data, item), \"Item not in list\"         \u2502\n     \u2502     )                                                                                    \u2502\n     \u2502     # check 3: empty list                                                                \u2502\n     \u2502     data = []                                                                            \u2502\n     \u2502     item = 1                                                                             \u2502\n     \u2502     assert_and_print(False, recursive_binary_search_efficient(data, item), \"Empty list\") \u2502\n     \u2502     # check 4: list with one element, item in list                                       \u2502\n     \u2502     data = [1]                                                                           \u2502\n     \u2502     item = 1                                                                             \u2502\n     \u2502     assert_and_print(                                                                    \u2502\n     \u2502         True,                                                                            \u2502\n     \u2502         recursive_binary_search_efficient(data, item),                                   \u2502\n     \u2502         \"List with one element, item in list\",                                           \u2502\n     \u2502     )                                                                                    \u2502\n     \u2502     # check 5: list with one element, item not in list                                   \u2502\n     \u2502     item = 2                                                                             \u2502\n     \u2502     assert_and_print(                                                                    \u2502\n     \u2502         False,                                                                           \u2502\n     \u2502         recursive_binary_search_efficient(data, item),                                   \u2502\n     \u2502         \"List with one element, item not in list\",                                       \u2502\n     \u2502     )                                                                                    \u2502\n     \u2502                                                                                          \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Run checks for Question 8 Part (c) with 'execexam' command and confirm correct exit code",
            "command": "poetry run execexam . tests/ --verbose --mark \"question_eight_part_c\"",
            "objectives": {
                "LO5": {
                    "degree": [
                        {
                            "CS": "D",
                            "rationale": "Implement an iterative binary search"
                        }
                    ]
                }
            },
            "status": false,
            "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 Item in list: Expected True, got False                                                                               \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_eight.py::test_iterative_binary_search - assert True == False                             \u2502\n     \u2502 1 failed, 23 deselected in 0.02s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 24 collected, 23 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                              \u2502\n     \u2502   Name: tests/test_question_eight.py::test_iterative_binary_search                           \u2502\n     \u2502   Path: <...>/algorithm-analysis-final-examination-starter/exam/tests/test_question_eight.py \u2502\n     \u2502   Line number: 16                                                                            \u2502\n     \u2502   Message: assert True == False                                                              \u2502\n     \u2502                                                                                              \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                      \u2502\n     \u2502 # File: tests/test_question_eight.py Line: 96                                        \u2502\n     \u2502 @pytest.mark.question_eight_part_c                                                   \u2502\n     \u2502 def test_iterative_binary_search():                                                  \u2502\n     \u2502     \"\"\"Test a function.\"\"\"                                                           \u2502\n     \u2502     # check 1: item in list                                                          \u2502\n     \u2502     data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]                                           \u2502\n     \u2502     item = 5                                                                         \u2502\n     \u2502     assert_and_print(True, iterative_binary_search(data, item), \"Item in list\")      \u2502\n     \u2502     # check 2: item not in list                                                      \u2502\n     \u2502     item = 11                                                                        \u2502\n     \u2502     assert_and_print(False, iterative_binary_search(data, item), \"Item not in list\") \u2502\n     \u2502     # check 3: empty list                                                            \u2502\n     \u2502     data = []                                                                        \u2502\n     \u2502     item = 1                                                                         \u2502\n     \u2502     assert_and_print(False, iterative_binary_search(data, item), \"Empty list\")       \u2502\n     \u2502     # check 4: list with one element, item in list                                   \u2502\n     \u2502     data = [1]                                                                       \u2502\n     \u2502     item = 1                                                                         \u2502\n     \u2502     assert_and_print(                                                                \u2502\n     \u2502         True,                                                                        \u2502\n     \u2502         iterative_binary_search(data, item),                                         \u2502\n     \u2502         \"List with one element, item in list\",                                       \u2502\n     \u2502     )                                                                                \u2502\n     \u2502     # check 5: list with one element, item not in list                               \u2502\n     \u2502     item = 2                                                                         \u2502\n     \u2502     assert_and_print(                                                                \u2502\n     \u2502         False,                                                                       \u2502\n     \u2502         iterative_binary_search(data, item),                                         \u2502\n     \u2502         \"List with one element, item not in list\",                                   \u2502\n     \u2502     )                                                                                \u2502\n     \u2502                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"
        },
        {
            "description": "Ensure that Question 1 follows industry-standard rules using the command 'ruff check'",
            "command": "poetry run ruff check questions/question_one.py",
            "status": false,
            "diagnostic": "questions/question_one.py:8:1: I001 [*] Import block is un-sorted or un-formatted\n     Found 1 error.\n     [*] 1 fixable with the `--fix` option."
        },
        {
            "description": "Ensure that Question 1 adheres to an industry-standard format using the command 'ruff format'",
            "command": "poetry run ruff format questions/question_one.py --check",
            "status": true
        },
        {
            "description": "Ensure that Question 1 has correct type annotations using the command 'mypy'",
            "command": "poetry run mypy questions/question_one.py",
            "status": true
        },
        {
            "description": "Ensure that Question 1 has correct number of fully type annotated functions using the command 'symbex'",
            "check": "MatchCommandFragment",
            "options": {
                "command": "poetry run symbex -s --fully-typed -f questions/question_one.py --count",
                "fragment": 3,
                "count": 1,
                "exact": true
            },
            "status": false,
            "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"
        },
        {
            "description": "Ensure that Question 1 has correct number of documented functions using the command 'symbex'",
            "check": "MatchCommandFragment",
            "options": {
                "command": "poetry run symbex -s --documented -f questions/question_one.py --count",
                "fragment": 3,
                "count": 1,
                "exact": true
            },
            "status": true
        },
        {
            "description": "Ensure that Question 1 has no undocumented functions using the command 'symbex'",
            "check": "MatchCommandFragment",
            "options": {
                "command": "poetry run symbex -s --undocumented -f questions/question_one.py --count",
                "fragment": 0,
                "count": 1,
                "exact": true
            },
            "status": true
        },
        {
            "description": "Ensure that Question 2 follows industry-standard rules using the command 'ruff check'",
            "command": "poetry run ruff check questions/question_two.py",
            "status": false,
            "diagnostic": "questions/question_two.py:9:1: I001 [*] Import block is un-sorted or un-formatted\n     questions/question_two.py:9:26: F401 [*] `typing.List` imported but unused\n     questions/question_two.py:9:32: F401 [*] `typing.Any` imported but unused\n     questions/question_two.py:74:5: D103 Missing docstring in public function\n     questions/question_two.py:106:5: D103 Missing docstring in public function\n     Found 5 errors.\n     [*] 3 fixable with the `--fix` option."
        },
        {
            "description": "Ensure that Question 2 adheres to an industry-standard format using the command 'ruff format'",
            "command": "poetry run ruff format questions/question_two.py --check",
            "status": true
        },
        {
            "description": "Ensure that Question 2 has correct type annotations using the command 'mypy'",
            "command": "poetry run mypy questions/question_two.py",
            "status": true
        },
        {
            "description": "Ensure that Question 2 has correct number of fully type annotated functions using the command 'symbex'",
            "check": "MatchCommandFragment",
            "options": {
                "command": "poetry run symbex -s --fully-typed -f questions/question_two.py --count",
                "fragment": 3,
                "count": 1,
                "exact": true
            },
            "status": true
        },
        {
            "description": "Ensure that Question 2 has correct number of documented functions using the command 'symbex'",
            "check": "MatchCommandFragment",
            "options": {
                "command": "poetry run symbex -s --documented -f questions/question_two.py --count",
                "fragment": 3,
                "count": 1,
                "exact": true
            },
            "status": false,
            "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"
        },
        {
            "description": "Ensure that Question 2 has no undocumented functions using the command 'symbex'",
            "check": "MatchCommandFragment",
            "options": {
                "command": "poetry run symbex -s --undocumented -f questions/question_two.py --count",
                "fragment": 0,
                "count": 1,
                "exact": true
            },
            "status": false,
            "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"
        },
        {
            "description": "Ensure that Question 3 follows industry-standard rules using the command 'ruff check'",
            "command": "poetry run ruff check questions/question_three.py",
            "status": true
        },
        {
            "description": "Ensure that Question 3 adheres to an industry-standard format using the command 'ruff format'",
            "command": "poetry run ruff format questions/question_three.py --check",
            "status": true
        },
        {
            "description": "Ensure that Question 3 has correct type annotations using the command 'mypy'",
            "command": "poetry run mypy questions/question_three.py",
            "status": true
        },
        {
            "description": "Ensure that Question 3 has correct number of fully type annotated functions using the command 'symbex'",
            "check": "MatchCommandFragment",
            "options": {
                "command": "poetry run symbex -s --fully-typed -f questions/question_three.py --count",
                "fragment": 3,
                "count": 1,
                "exact": true
            },
            "status": false,
            "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"
        },
        {
            "description": "Ensure that Question 3 has correct number of documented functions using the command 'symbex'",
            "check": "MatchCommandFragment",
            "options": {
                "command": "poetry run symbex -s --documented -f questions/question_three.py --count",
                "fragment": 3,
                "count": 1,
                "exact": true
            },
            "status": true
        },
        {
            "description": "Ensure that Question 3 has no undocumented functions using the command 'symbex'",
            "check": "MatchCommandFragment",
            "options": {
                "command": "poetry run symbex -s --undocumented -f questions/question_three.py --count",
                "fragment": 0,
                "count": 1,
                "exact": true
            },
            "status": true
        },
        {
            "description": "Ensure that Question 4 follows industry-standard rules using the command 'ruff check'",
            "command": "poetry run ruff check questions/question_four.py",
            "status": false,
            "diagnostic": "questions/question_four.py:48:5: D103 Missing docstring in public function\n     questions/question_four.py:78:5: D103 Missing docstring in public function\n     questions/question_four.py:142:5: D103 Missing docstring in public function\n     Found 3 errors."
        },
        {
            "description": "Ensure that Question 4 adheres to an industry-standard format using the command 'ruff format'",
            "command": "poetry run ruff format questions/question_four.py --check",
            "status": true
        },
        {
            "description": "Ensure that Question 4 has correct type annotations using the command 'mypy'",
            "command": "poetry run mypy questions/question_four.py",
            "status": true
        },
        {
            "description": "Ensure that Question 4 has correct number of fully type annotated functions using the command 'symbex'",
            "check": "MatchCommandFragment",
            "options": {
                "command": "poetry run symbex -s --fully-typed -f questions/question_four.py --count",
                "fragment": 4,
                "count": 1,
                "exact": true
            },
            "status": false,
            "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"
        },
        {
            "description": "Ensure that Question 4 has correct number of documented functions using the command 'symbex'",
            "check": "MatchCommandFragment",
            "options": {
                "command": "poetry run symbex -s --documented -f questions/question_four.py --count",
                "fragment": 5,
                "count": 1,
                "exact": true
            },
            "status": false,
            "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"
        },
        {
            "description": "Ensure that Question 4 has no undocumented functions using the command 'symbex'",
            "check": "MatchCommandFragment",
            "options": {
                "command": "poetry run symbex -s --undocumented -f questions/question_four.py --count",
                "fragment": 0,
                "count": 1,
                "exact": true
            },
            "status": false,
            "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"
        },
        {
            "description": "Ensure that Question 5 follows industry-standard rules using the command 'ruff check'",
            "command": "poetry run ruff check questions/question_five.py",
            "status": false,
            "diagnostic": "questions/question_five.py:62:7: D101 Missing docstring in public class\n     questions/question_five.py:114:5: D103 Missing docstring in public function\n     questions/question_five.py:161:5: D103 Missing docstring in public function\n     Found 3 errors."
        },
        {
            "description": "Ensure that Question 5 adheres to an industry-standard format using the command 'ruff format'",
            "command": "poetry run ruff format questions/question_five.py --check",
            "status": false,
            "diagnostic": "Would reformat: questions/question_five.py\n     1 file would be reformatted"
        },
        {
            "description": "Ensure that Question 5 has correct type annotations using the command 'mypy'",
            "command": "poetry run mypy questions/question_five.py",
            "status": false,
            "diagnostic": "questions/question_five.py:66: error: Need type annotation for \"_data_list\" (hint: \"_data_list: List[<type>] = ...\")  [var-annotated]\n     Found 1 error in 1 file (checked 1 source file)"
        },
        {
            "description": "Ensure that Question 5 has no undocumented functions using the command 'symbex'",
            "check": "MatchCommandFragment",
            "options": {
                "command": "poetry run symbex -s --undocumented -f questions/question_five.py --count",
                "fragment": 0,
                "count": 1,
                "exact": true
            },
            "status": false,
            "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"
        },
        {
            "description": "Ensure that Question 6 follows industry-standard rules using the command 'ruff check'",
            "command": "poetry run ruff check questions/question_six.py",
            "status": false,
            "diagnostic": "questions/question_six.py:131:9: D105 Missing docstring in magic method\n     questions/question_six.py:143:5: D103 Missing docstring in public function\n     Found 2 errors."
        },
        {
            "description": "Ensure that Question 6 adheres to an industry-standard format using the command 'ruff format'",
            "command": "poetry run ruff format questions/question_six.py --check",
            "status": true
        },
        {
            "description": "Ensure that Question 6 has correct type annotations using the command 'mypy'",
            "command": "poetry run mypy questions/question_six.py",
            "status": true
        },
        {
            "description": "Ensure that Question 6 has no undocumented functions using the command 'symbex'",
            "check": "MatchCommandFragment",
            "options": {
                "command": "poetry run symbex -s --undocumented -f questions/question_six.py --count",
                "fragment": 0,
                "count": 1,
                "exact": true
            },
            "status": false,
            "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"
        },
        {
            "description": "Ensure that Question 7 follows industry-standard rules using the command 'ruff check'",
            "command": "poetry run ruff check questions/question_seven.py",
            "status": false,
            "diagnostic": "questions/question_seven.py:64:5: D103 Missing docstring in public function\n     questions/question_seven.py:93:5: D103 Missing docstring in public function\n     Found 2 errors."
        },
        {
            "description": "Ensure that Question 7 adheres to an industry-standard format using the command 'ruff format'",
            "command": "poetry run ruff format questions/question_seven.py --check",
            "status": true
        },
        {
            "description": "Ensure that Question 7 has correct type annotations using the command 'mypy'",
            "command": "poetry run mypy questions/question_seven.py",
            "status": true
        },
        {
            "description": "Ensure that Question 7 has no undocumented functions using the command 'symbex'",
            "check": "MatchCommandFragment",
            "options": {
                "command": "poetry run symbex -s --undocumented -f questions/question_seven.py --count",
                "fragment": 0,
                "count": 1,
                "exact": true
            },
            "status": false,
            "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"
        },
        {
            "description": "Ensure that Question 8 follows industry-standard rules using the command 'ruff check'",
            "command": "poetry run ruff check questions/question_eight.py",
            "status": false,
            "diagnostic": "questions/question_eight.py:11:1: I001 [*] Import block is un-sorted or un-formatted\n     questions/question_eight.py:50:5: D103 Missing docstring in public function\n     questions/question_eight.py:86:5: D103 Missing docstring in public function\n     questions/question_eight.py:126:5: D103 Missing docstring in public function\n     Found 4 errors.\n     [*] 1 fixable with the `--fix` option."
        },
        {
            "description": "Ensure that Question 8 adheres to an industry-standard format using the command 'ruff format'",
            "command": "poetry run ruff format questions/question_eight.py --check",
            "status": true
        },
        {
            "description": "Ensure that Question 8 has correct type annotations using the command 'mypy'",
            "command": "poetry run mypy questions/question_eight.py",
            "status": true
        },
        {
            "description": "Ensure that Question 8 has no undocumented functions using the command 'symbex'",
            "check": "MatchCommandFragment",
            "options": {
                "command": "poetry run symbex -s --undocumented -f questions/question_eight.py --count",
                "fragment": 0,
                "count": 1,
                "exact": true
            },
            "status": false,
            "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"
        }
    ]
}